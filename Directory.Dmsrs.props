<Project>
	<!-- Properties in this file is not needed to change in general, 
	please provide your good idea if you change this file content	-->

	<PropertyGroup>
		<PropsDir>$([MSBuild]::NormalizeDirectory($(MSBuildThisFileDirectory)))</PropsDir>
		<ProjDir>$([MSBuild]::NormalizeDirectory($(MSBuildProjectDirectory)))</ProjDir>
		<PropsSolutionDir>$([MSBuild]::NormalizeDirectory('$(PropsDir)','solution'))</PropsSolutionDir>
	</PropertyGroup>

	<PropertyGroup>

		<TargetFrameworks>net7.0</TargetFrameworks>
		<!--
		As the SDK sets these attributes automatically as part of the build, you'll get build time errors. 
		Simply delete the assembly attributes, and use the MSBuild properties instead.
		-->
		<GenerateAssemblyInfo>true</GenerateAssemblyInfo>
		<Deterministic>true</Deterministic>
		<RunAnalyzersDuringLiveAnalysis>True</RunAnalyzersDuringLiveAnalysis>
		<NeutralLanguage>zh-CHS</NeutralLanguage>
		<GenerateDocumentationFile>true</GenerateDocumentationFile>
		<PublishRepositoryUrl>true</PublishRepositoryUrl>
		<LangVersion>10</LangVersion>
		<NoWarn>1701;1702;1591;8002</NoWarn>
		<EnforceCodeStyleInBuild>True</EnforceCodeStyleInBuild>
		<AutoGenerateBindingRedirects>False</AutoGenerateBindingRedirects>
		<Nullable>disable</Nullable>
		<AllowUnsafeBlocks>True</AllowUnsafeBlocks>
		<AssemblyName>$(MSBuildProjectName)</AssemblyName>
		<DefineConstants>$(DefineConstants);$(MSBuildProjectName.Replace(" ", "_").Replace(".", "_"));FEATURE_UNLOAD;FEATURE_NATIVE_RESOLVER</DefineConstants>
		<RootNamespace>$(MSBuildProjectName.Replace(" ", "_"))</RootNamespace>
		<Optimize Condition="'$(Configuration)'=='Release'">true</Optimize>
		<DebugType>portable</DebugType>
	</PropertyGroup>

	<PropertyGroup Condition="'$(TargetFramework)'=='net6.0|net7.0|net8.0'">
		<ImplicitUsings>enable</ImplicitUsings>
	</PropertyGroup>

	<!-- *** - Warning - ***
  All changes in this file will impact all project files of current solution(sln). 
  Properties in this file can be changed in general if you using it.    
  please provide your good idea if you are willing  -->
	<Import Project="./Directory.Dmsrs.Version.props"/>
	<PropertyGroup>
		<CertificateFileName>EmitMapper.snk</CertificateFileName>
		<ChangeLogFileName>changelog.md</ChangeLogFileName>
		<ProjectDescriptionFileName>description.md</ProjectDescriptionFileName>
		 
	</PropertyGroup>
	<PropertyGroup>
		
		<PackageVersion>$(Version)</PackageVersion>
		<Title>$(AssemblyName)</Title>		
		<Authors>Jimbo</Authors>
		<Company>DMSRS</Company>
		<Copyright>Copyright (c) 2006-2022 DMSRS. All rights reserved.</Copyright>
		<PackageId>DMSRS.$(AssemblyName)</PackageId>
		<PackageTags>EmitMapper;Mapper;POCO;Object Mapping</PackageTags>
		<PackageLicenseExpression>MIT</PackageLicenseExpression>
		<PackageProjectUrl>https://github.com/niubilitynetcore/EmitMapper</PackageProjectUrl>
		<RepositoryType>git</RepositoryType>
		<RepositoryUrl>https://github.com/niubilitynetcore/EmitMapper</RepositoryUrl>
		<PackageRequireLicenseAcceptance>True</PackageRequireLicenseAcceptance>

		<!--<PackageOutputPath>$(PropsDir)nupkgs</PackageOutputPath>-->
	</PropertyGroup>

	<PropertyGroup Condition="'$(IsTestProject)' != 'true'">
		<GeneratePackageOnBuild>true</GeneratePackageOnBuild>
	</PropertyGroup> 
	<PropertyGroup Condition="'$(GITHUB_ACTIONS)' == 'true'">
		<ContinuousIntegrationBuild>true</ContinuousIntegrationBuild>
		<!-- Optional: Publish the repository URL in the built .nupkg (in the NuSpec <Repository> element) -->
		<PublishRepositoryUrl>true</PublishRepositoryUrl>

		<!-- 只有在 GitHub 的 Action 构建才能使用源代码链接 -->
		<!-- 源代码链接需要使用 commit 号，而在 GitHub 的 Action 构建的 commit 才是对的 -->
		<!-- 本地构建，也许没有记得 commit 就构建，此时的 nuget 包的源代码是不对的，上传上去会让调试诡异 -->
		<!-- Optional: Embed source files that are not tracked by the source control manager in the PDB -->
		<EmbedUntrackedSources>true</EmbedUntrackedSources>

		<!-- 本地等不需要创建符号文件 -->
		<!-- Optional: Build symbol package (.snupkg) to distribute the PDB containing Source Link -->
		<IncludeSymbols>true</IncludeSymbols>
		<SymbolPackageFormat>snupkg</SymbolPackageFormat>
	</PropertyGroup>
	
	<ItemGroup>
		<None Exclude="$(PropsDir)**/*.g.props" Include="$(PropsDir)**/*.props">
			<Link> Solution Items/%(RecursiveDir)/%(Filename)%(Extension)</Link>
		</None>
		<None Exclude="$(PropsDir)**/*.props" Include="$(PropsDir)*.*">
			<Link> Solution Items/Root(.props)/%(Filename)%(Extension)</Link>
		</None>
		<None Include="$(PropsDir).github/**/*.*">
			<Link> Solution Items/Root(.props)/.github/%(RecursiveDir)/%(Filename)%(Extension)</Link>
		</None>
		<None Include="$(PropsSolutionDir)**/*.*" Condition="Exists('$(PropsSolutionDir)')">
			<Link> Solution Items/Root(.props)/Solution/%(RecursiveDir)/%(Filename)%(Extension)</Link>
		</None>
	</ItemGroup>
	<ItemGroup Condition="'$(GITHUB_ACTIONS)' == 'true' and '$(IsTestProject)' != 'true'">
		<PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.1.1">
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
		</PackageReference>
	</ItemGroup>

	<!-- PackageReadmeFile -->
	<Choose>
		<When Condition="Exists('$(ProjDir)readme.md')">
			<PropertyGroup>
				<PackageReadmeFile>readme.md</PackageReadmeFile>
				<ReadmeFilePath>$(ProjDir)readme.md</ReadmeFilePath>
			</PropertyGroup>
			<ItemGroup>
				<None Include='$(ProjDir)readme.md' Pack='True' PackagePath='/' Visible='True' />
			</ItemGroup>
		</When>
		<When Condition="Exists('$(PropsSolutionDir)readme.md')">
			<PropertyGroup>
				<PackageReadmeFile>readme.md</PackageReadmeFile>
				<ReadmeFilePath>$(PropsSolutionDir)readme.md</ReadmeFilePath>
			</PropertyGroup>
			<ItemGroup>
				<None Include='$(PropsSolutionDir)readme.md' Pack='True' PackagePath='/' Visible='True' />
			</ItemGroup>
		</When>
		<When Condition="Exists('$(PropsDir)readme.md')">
			<PropertyGroup>
				<ReadmeFilePath>$(PropsDir)readme.md</ReadmeFilePath>
				<PackageReadmeFile>readme.md</PackageReadmeFile>
			</PropertyGroup>
			<ItemGroup>
				<None Include="$(PropsDir)readme.md" Pack='True' PackagePath='/' Visible='True' />
			</ItemGroup>
		</When>
	</Choose>

	<!--PackageReleaseNotes $(ChangeLogFileName)-->
	<Choose>
		<When Condition="'$(ChangeLogFileName)'!='' and Exists('$(ProjDir)$(ChangeLogFileName)')">
			<PropertyGroup>
				<PackageReleaseNotes>$([System.IO.File]::ReadAllText("$(ProjDir)$(ChangeLogFileName)"))</PackageReleaseNotes>
				<ChangeLogFilePath>$(ProjDir)$(ChangeLogFileName)</ChangeLogFilePath>
			</PropertyGroup>
			<ItemGroup>
				<None Include="$(ProjDir)$(ChangeLogFileName)" Pack='True' PackagePath='/' Visible='True' />
			</ItemGroup>
		</When>
		<When Condition="'$(ChangeLogFileName)'!='' and Exists('$(PropsSolutionDir)$(ChangeLogFileName)')">
			<PropertyGroup>
				<PackageReleaseNotes>$([System.IO.File]::ReadAllText("$(PropsSolutionDir)$(ChangeLogFileName)"))</PackageReleaseNotes>
				<ChangeLogFilePath>$(PropsSolutionDir)$(ChangeLogFileName)</ChangeLogFilePath>
			</PropertyGroup>
			<ItemGroup>
				<None Include="$(PropsSolutionDir)$(ChangeLogFileName)" Pack='True' PackagePath='/' Visible='True' />
			</ItemGroup>
		</When>
		<When Condition="'$(ChangeLogFileName)'!='' and Exists('$(PropsDir)$(ChangeLogFileName)')">
			<PropertyGroup>
				<PackageReleaseNotes>$([System.IO.File]::ReadAllText("$(PropsDir)$(ChangeLogFileName)"))</PackageReleaseNotes>
				<ChangeLogFilePath>$(PropsDir)$(ChangeLogFileName)</ChangeLogFilePath>
			</PropertyGroup>
			<ItemGroup>
				<None Include="$(PropsDir)$(ChangeLogFileName)" Pack='True' PackagePath='/' Visible='True' />
			</ItemGroup>
		</When>
	</Choose>

	<!-- Description and PackageDescription-->
	<!--A long description for the assembly. If PackageDescription is not specified, then this property is also used as the description of the package.-->
	<Choose>
		<When Condition="'$(ProjectDescriptionFileName)'!='' and Exists('$(ProjDir)$(ProjectDescriptionFileName)')">
			<PropertyGroup>
				<DescriptionContent>$([System.IO.File]::ReadAllText("$(ProjDir)$(ProjectDescriptionFileName)"))</DescriptionContent>
				<DescriptionFilePath>$(ProjDir)$(ProjectDescriptionFileName)</DescriptionFilePath>
			</PropertyGroup>
			<ItemGroup>
				<None Include="$(ProjDir)$(ProjectDescriptionFileName)" Pack='True' PackagePath='/' Visible='True' />
			</ItemGroup>
		</When>
		<When Condition="'$(ProjectDescriptionFileName)'!='' and Exists('$(PropsDir)$(ProjectDescriptionFileName)')">
			<PropertyGroup>
				<DescriptionContent>$([System.IO.File]::ReadAllText('$(PropsDir)$(ProjectDescriptionFileName)'))</DescriptionContent>
				<DescriptionFilePath>$(PropsDir)$(ProjectDescriptionFileName)</DescriptionFilePath>
			</PropertyGroup>
		</When>
		<When Condition="'$(ReadmeFilePath)'!='' and Exists('$(ReadmeFilePath)')">
			<PropertyGroup>
				<DescriptionContent>$([System.IO.File]::ReadAllText('$(ReadmeFilePath)'))</DescriptionContent>
				<DescriptionFilePath>$(ReadmeFilePath)</DescriptionFilePath>
			</PropertyGroup>
		</When>
		<When Condition="'$(ChangeLogFilePath)'!='' and Exists('$(ChangeLogFilePath)')">
			<PropertyGroup>
				<DescriptionContent>$([System.IO.File]::ReadAllText('$(ChangeLogFilePath)'))</DescriptionContent>
				<DescriptionFilePath>$(ChangeLogFilePath)</DescriptionFilePath>
			</PropertyGroup>
		</When>
		<Otherwise>
			<PropertyGroup>
				<!--default description for all packages-->
				<!--<PackageDescription></PackageDescription>-->
			</PropertyGroup>
		</Otherwise>
	</Choose>

	<Choose>
		<When Condition="$(DescriptionContent.Length)>4000">
			<PropertyGroup>
				<DescriptionContent>$(DescriptionContent.SubString(0,4000))</DescriptionContent>
			</PropertyGroup>
		</When>
	</Choose>
	<PropertyGroup Condition="'$(DescriptionContent)' !=''">
		<Description>$(DescriptionContent)</Description>
		<!--default description for all packages-->
		<!--<PackageDescription></PackageDescription>-->
	</PropertyGroup>
	<!--PackageIcon-->
	<Choose>
		<When Condition="Exists('$(ProjDir)icon.png')">
			<PropertyGroup>
				<PackageIcon>icon.png</PackageIcon>
				<PackageIconPath>$(ProjDir)icon.png</PackageIconPath>
			</PropertyGroup>
			<ItemGroup>
				<None Include="$(ProjDir)icon.png" Pack='True' PackagePath='/' Visible='True' />

			</ItemGroup>
		</When>
		<When Condition="Exists('$(PropsSolutionDir)icon.png')">
			<PropertyGroup>
				<PackageIcon>icon.png</PackageIcon>
				<PackageIconPath>$(PropsSolutionDir)icon.png</PackageIconPath>
			</PropertyGroup>
			<ItemGroup>
				<None Include="$(PropsSolutionDir)icon.png" Pack='True' PackagePath='/' Visible='True' />
			</ItemGroup>
		</When>
		<When Condition="Exists('$(PropsDir)icon.png')">
			<PropertyGroup>
				<PackageIcon>icon.png</PackageIcon>
				<PackageIconPath>$(PropsDir)icon.png</PackageIconPath>
				<icon>icon.png</icon>
			</PropertyGroup>
			<ItemGroup>
				<None Include="$(PropsDir)icon.png" Pack='True' PackagePath='/' Visible='True' />
			</ItemGroup>
		</When>
	</Choose>

	<!--ApplicationIcon - Load app.ico file for ApplicationIcon(.exe)-->
	<Choose>
		<When Condition="Exists('$(ProjDir)app.ico')">
			<PropertyGroup>
				<ApplicationIcon>$(ProjDir)app.ico</ApplicationIcon>
			</PropertyGroup>
			<ItemGroup>
				<None Include="$(ProjDir)app.ico" Pack='True' PackagePath='/' Visible='True' />
			</ItemGroup>
		</When>
		<When Condition="Exists('$(PropsSolutionDir)app.ico')">
			<PropertyGroup>
				<ApplicationIcon>$(PropsSolutionDir)app.ico</ApplicationIcon>
			</PropertyGroup>
			<ItemGroup>
				<None Include="$(PropsSolutionDir)app.ico" Pack='True' PackagePath='/' Visible='True' />
			</ItemGroup>
		</When>
		<When Condition="Exists('$(PropsDir)app.ico')">
			<PropertyGroup>
				<ApplicationIcon>$(PropsDir)app.ico</ApplicationIcon>
			</PropertyGroup>
			<ItemGroup>
				<None Include="$(PropsDir)app.ico" Pack='True' PackagePath='/' Visible='True' />
			</ItemGroup>
		</When>
	</Choose>

	<!-- AssemblyOriginatorKeyFile and PackageCertificateKeyFile -->
	<Choose>
		<When Condition="'$(IsTestProject)'=='True'">
			<PropertyGroup>
				<SignAssembly>false</SignAssembly>
			</PropertyGroup>
		</When>
		<When Condition="'$(CertificateFileName)'!='' and Exists('$(ProjDir)$(CertificateFileName)')">
			<PropertyGroup>
				<SignAssembly>true</SignAssembly>
				<AssemblyOriginatorKeyFile>$(ProjDir)$(CertificateFileName)</AssemblyOriginatorKeyFile>
				<PackageCertificateKeyFile>$(ProjDir)$(CertificateFileName)</PackageCertificateKeyFile>
			</PropertyGroup>
		</When>
		<When Condition="'$(CertificateFileName)'!='' and Exists('$(PropsSolutionDir)$(CertificateFileName)')">
			<PropertyGroup>
				<SignAssembly>true</SignAssembly>
				<AssemblyOriginatorKeyFile>$(PropsSolutionDir)$(CertificateFileName)</AssemblyOriginatorKeyFile>
				<PackageCertificateKeyFile>$(PropsSolutionDir)$(CertificateFileName)</PackageCertificateKeyFile>
			</PropertyGroup>
		</When>
		<When Condition="'$(CertificateFileName)'!='' and Exists('$(PropsDir)$(CertificateFileName)')">
			<PropertyGroup>
				<SignAssembly>true</SignAssembly>
				<AssemblyOriginatorKeyFile>$(PropsDir)$(CertificateFileName)</AssemblyOriginatorKeyFile>
				<PackageCertificateKeyFile>$(PropsDir)$(CertificateFileName)</PackageCertificateKeyFile>
			</PropertyGroup>
		</When>
	</Choose>

</Project>